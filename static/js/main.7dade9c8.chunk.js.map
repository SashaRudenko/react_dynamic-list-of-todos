{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","TodoList","state","todos","isLoadingError","filterByState","filterByQuery","handleSelect","event","value","target","setState","handleInput","setRandomSort","prevState","sort","Math","random","getPrepearedList","prepearedList","filter","todo","completed","title","toLocaleLowerCase","includes","fetch","then","response","json","this","props","onSelectUser","selectedUserId","prepearedTodos","className","onChange","placeholder","type","onClick","map","checked","readOnly","userId","id","React","Component","CurrentUser","user","isUserError","loadData","prevProps","a","url","userFromServer","resetUserSelection","name","email","phone","App","ReactDOM","render","document","getElementById"],"mappings":"4SACMA,G,YAAW,qC,eCeJC,EAAb,4MACEC,MAAe,CACbC,MAAO,GACPC,gBAAgB,EAChBC,cAAe,MACfC,cAAe,IALnB,EAmBEC,aAAe,SAACC,GACd,IAAQC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CACZN,cAAeI,KAvBrB,EA2BEG,YAAc,SAACJ,GACb,IAAQC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CACZL,cAAeG,KA/BrB,EAmCEI,cAAgB,WACd,EAAKF,UAAS,SAACG,GAAD,MAAgB,CAC5BX,MAAOW,EAAUX,MAAMY,MAAK,iBAAM,GAAMC,KAAKC,iBArCnD,EAyCEC,iBAAmB,WACjB,MAAgD,EAAKhB,MAA7CC,EAAR,EAAQA,MAAOG,EAAf,EAAeA,cAAeD,EAA9B,EAA8BA,cAE1Bc,EAAwBhB,EAAMiB,QAAO,SAAAC,GACvC,OAAQhB,GACN,IAAK,SACH,OAAQgB,EAAKC,UACf,IAAK,YACH,OAAOD,EAAKC,UACd,IAAK,MACL,QACE,OAAOD,MAQb,OAJAF,EAAgBA,EACbC,QAAO,SAAAC,GAAI,OAAKA,EAAKE,OACjBF,EAAKE,MAAMC,oBAAoBC,SAASnB,EAAckB,yBA1DjE,uDAQE,WAAqB,IAAD,OAClB,IDrBKE,MAAM,GAAD,OAAI1B,EAAJ,YACT2B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCsBtBF,MAAK,SAAAxB,GACJ,EAAKQ,SAAS,CAAER,QAAOC,gBAAgB,OAE3C,SACA0B,KAAKnB,SAAS,CAAEP,gBAAgB,OAftC,oBA+DE,WACE,MAII0B,KAAK5B,MAHPE,EADF,EACEA,eACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,cAEF,EAAyCwB,KAAKC,MAAtCC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,eAChBC,EAAiBJ,KAAKZ,mBAE5B,OACE,sBAAKiB,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,mBAAf,UACE,yBAAQA,UAAU,cAAc1B,MAAOJ,EAAe+B,SAAUN,KAAKvB,aAArE,UACE,wBAAQE,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,0BAEF,uBAAO0B,UAAU,eAAe1B,MAAOH,EAAe8B,SAAUN,KAAKlB,YAAayB,YAAY,cAC9F,wBAAQC,KAAK,SAASH,UAAU,kBAAkBI,QAAST,KAAKjB,cAAhE,0BAIF,qBAAKsB,UAAS,mCAA8B/B,GAAmB,kBAA/D,UACIA,GACA,oBAAI+B,UAAU,iBAAd,SACGD,EAAeM,KAAI,SAAAnB,GAAI,OACtB,qBAEEc,UACEd,EAAKC,UAAY,yCAA2C,2CAHhE,UAME,kCACE,uBACEgB,KAAK,WACLG,QAASpB,EAAKC,UACdoB,UAAQ,IAEV,4BAAIrB,EAAKE,WAGX,wBACEe,KAAK,SACLH,UAAWF,IAAmBZ,EAAKsB,OAC/B,gCACA,+DACJJ,QAAS,kBAAMP,EAAaX,EAAKsB,SALnC,yBAOYtB,EAAKsB,YArBZtB,EAAKuB,kBA3F5B,GAA8BC,IAAMC,W,uBCFvBC,G,MAAb,4MACE7C,MAAe,CACb8C,KAAM,KACNC,aAAa,GAHjB,uDAME,WACEnB,KAAKoB,aAPT,gCAUE,SAAmBC,GACbA,IAAcrB,KAAKC,OACrBD,KAAKoB,aAZX,6DAgBE,4BAAAE,EAAA,+EFtBuBC,EEwBmBvB,KAAKC,MAAMY,OFvB9CjB,MAAM,GAAD,OAAI1B,EAAJ,kBAAsBqD,IAC/B1B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UEoB7B,OAEUyB,EAFV,OAIIxB,KAAKnB,SAAS,CAAEqC,KAAMM,EAAgBL,aAAa,IAJvD,gDAMInB,KAAKnB,SAAS,CAAEsC,aAAa,IANjC,kCFtBsB,IAACI,IEsBvB,oBAhBF,0EA0BE,WACE,MAA8BvB,KAAK5B,MAA3B8C,EAAR,EAAQA,KAAMC,EAAd,EAAcA,YACNM,EAAuBzB,KAAKC,MAA5BwB,mBAER,OACE,sBAAKpB,UAAU,cAAf,UACE,wBACEA,UAAU,2BACVG,KAAK,SACLC,QAASgB,EAHX,mBAOA,oBAAIpB,UAAU,qBAAd,SACE,+BACIc,EAAe,4CAAhB,yBAAwED,GAAQA,EAAKJ,SAGxFK,GACA,qCACE,oBAAId,UAAU,oBAAd,SAAmCa,GAAQA,EAAKQ,OAChD,mBAAGrB,UAAU,qBAAb,SAAmCa,GAAQA,EAAKS,QAChD,mBAAGtB,UAAU,qBAAb,SAAmCa,GAAQA,EAAKU,kBAhD5D,GAAiCb,IAAMC,YCyCxBa,E,4MA5CbzD,MAAe,CACb+B,eAAgB,G,EAIlBD,aAAe,SAACW,GACd,EAAKhC,SAAS,CACZsB,eAAgBU,K,EAIpBY,mBAAqB,WACnB,EAAK5C,SAAS,CACZsB,eAAgB,K,4CAIpB,WACE,IAAQA,EAAmBH,KAAK5B,MAAxB+B,eAER,OACE,sBAAKE,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEF,eAAgBA,EAChBD,aAAcF,KAAKE,iBAIvB,qBAAKG,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGF,EACC,cAAC,EAAD,CACEU,OAAQV,EACRsB,mBAAoBzB,KAAKyB,qBAEzB,8B,GArCEV,IAAMC,WCPxBc,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7dade9c8.chunk.js","sourcesContent":["// eslint-disable-next-line\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (url: number) => {\n  return fetch(`${BASE_URL}/users/${url}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport { getTodos } from '../../api/api';\nimport './TodoList.scss';\n\ninterface Props {\n  onSelectUser: (userId: number) => void;\n  selectedUserId: number;\n}\n\ninterface State {\n  todos: Todo[];\n  isLoadingError: boolean;\n  filterByState: string;\n  filterByQuery: string;\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    isLoadingError: true,\n    filterByState: 'All',\n    filterByQuery: '',\n  };\n\n  componentDidMount() {\n    try {\n      getTodos()\n        .then(todos => {\n          this.setState({ todos, isLoadingError: false });\n        });\n    } catch {\n      this.setState({ isLoadingError: true });\n    }\n  }\n\n  handleSelect = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    const { value } = event.target;\n\n    this.setState({\n      filterByState: value,\n    });\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const { value } = event.target;\n\n    this.setState({\n      filterByQuery: value,\n    });\n  };\n\n  setRandomSort = () => {\n    this.setState((prevState) => ({\n      todos: prevState.todos.sort(() => 0.5 - Math.random()),\n    }));\n  };\n\n  getPrepearedList = () => {\n    const { todos, filterByQuery, filterByState } = this.state;\n\n    let prepearedList: Todo[] = todos.filter(todo => {\n      switch (filterByState) {\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        case 'All':\n        default:\n          return todo;\n      }\n    });\n\n    prepearedList = prepearedList\n      .filter(todo => (todo.title\n        && todo.title.toLocaleLowerCase().includes(filterByQuery.toLocaleLowerCase())));\n\n    return prepearedList;\n  };\n\n  render() {\n    const {\n      isLoadingError,\n      filterByState,\n      filterByQuery,\n    } = this.state;\n    const { onSelectUser, selectedUserId } = this.props;\n    const prepearedTodos = this.getPrepearedList();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"input-group mb-2\">\n          <select className=\"form-select\" value={filterByState} onChange={this.handleSelect}>\n            <option value=\"All\">All</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Completed\">Completed</option>\n          </select>\n          <input className=\"form-control\" value={filterByQuery} onChange={this.handleInput} placeholder=\"search...\" />\n          <button type=\"button\" className=\"btn btn-primary\" onClick={this.setRandomSort}>\n            Randomize\n          </button>\n        </div>\n        <div className={`TodoList__list-container ${isLoadingError && ('spinner-border')}`}>\n          {!isLoadingError && (\n            <ul className=\"TodoList__list\">\n              {prepearedTodos.map(todo => (\n                <li\n                  key={todo.id}\n                  className={\n                    todo.completed ? 'TodoList__item TodoList__item--checked' : 'TodoList__item TodoList__item--unchecked'\n                  }\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked={todo.completed}\n                      readOnly\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    type=\"button\"\n                    className={selectedUserId !== todo.userId\n                      ? 'Todolist__user-button button '\n                      : 'TodoList__user-button TodoList__user-button--selected button'}\n                    onClick={() => onSelectUser(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { getUsers } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  resetUserSelection: () => void;\n}\n\ninterface State {\n  user: null | User;\n  isUserError: boolean;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    isUserError: false,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps !== this.props) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    try {\n      const userFromServer = await getUsers(this.props.userId);\n\n      this.setState({ user: userFromServer, isUserError: false });\n    } catch (error) {\n      this.setState({ isUserError: true });\n    }\n  }\n\n  render() {\n    const { user, isUserError } = this.state;\n    const { resetUserSelection } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          className=\"List__user-button button\"\n          type=\"submit\"\n          onClick={resetUserSelection}\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {(isUserError && 'OOPS..something went wrong...üôÅ') || `Selected user: ${user && user.id}`}\n          </span>\n        </h2>\n        {!isUserError && (\n          <>\n            <h3 className=\"CurrentUser__name\">{user && user.name}</h3>\n            <p className=\"CurrentUser__email\">{user && user.email}</p>\n            <p className=\"CurrentUser__phone\">{user && user.phone}</p>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n\n  };\n\n  onSelectUser = (userId: number): void => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  resetUserSelection = (): void => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            onSelectUser={this.onSelectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                resetUserSelection={this.resetUserSelection}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}